#include <cassert> // assert()
#include <cstring> // memset()

#include <buffer_handle/character.hpp> // character()

namespace buffer_handle
{
  inline
  constexpr bool must_write(config Config, action Action)
  {
    return (Config == config::static_ && Action == action::prepare)
      || (Config == config::dynamic && Action != action::size);
  }

  inline
  constexpr action write_when_reset(action value)
  {
    return (value == action::reset) ? action::write : value;
  }

  template<align Align, bool UsePreviousLength, char Pad, typename Size> inline
  void reset(char * buffer, Size max_length, Size & previous_length)
  {
    if(UsePreviousLength)
      {
	if(Align == align::left)
	  {
	    std::memset(buffer, Pad, previous_length);
	  }
	else if(Align == align::right)
	  {
	    std::memset(buffer + max_length - previous_length, Pad, previous_length);
	  }

	previous_length = 0;
      }
    else
      {
	std::memset(buffer, Pad, max_length);
      }
  }

  template<bool UsePreviousLength, char Pad, typename Size> inline
  void pad_left(char * begin, char * end, Size max_length, Size & previous_length)//for align::right content
  {
    Size current_length = (begin + max_length) - end;

    assert(current_length <= max_length);
    assert(previous_length <= max_length);

    if(UsePreviousLength)
      {
	if(current_length < previous_length)
	  {
	    std::memset(begin + max_length - previous_length, Pad, previous_length - current_length);
	  }

	previous_length = current_length;
      }
    else
      {
	std::memset(begin, Pad, end - begin);// == max_length - current_length
      }
  }

  template<bool UsePreviousLength, char Pad, typename Size> inline
  void pad_right(char * begin, char * end, Size max_length, Size & previous_length)//for align::left content
  {
    Size current_length = end - begin;

    assert(current_length <= max_length);
    assert(previous_length <= max_length);

    if(UsePreviousLength)
      {
	if(current_length < previous_length)
	  {
	    std::memset(end, Pad, previous_length - current_length);
	  }

	previous_length = current_length;
      }
    else
      {
	std::memset(end, Pad, max_length - current_length);
      }
  }

  template<char Separator>
  template<config Config, action Action> inline
  char * character_separator_t<Separator>::handle(char * buffer) const
  {
    return character<Config, Action>(buffer, Separator);
  }

  template<char Separator>
  template<config Config, action Action> inline
  char * character_and_space_separator_t<Separator>::handle(char * buffer) const
  {
    buffer = character<Config, Action>(buffer, Separator);
    buffer = character<Config, Action>(buffer, ' ');

    return buffer;
  }
};

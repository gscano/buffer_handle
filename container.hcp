#include <buffer_handle/helper.hpp> // pad_left() pad_right()

namespace buffer_handle
{
  namespace details
  {
    template<config Config, align Align, action Action,
	     class Handler, class Separator, typename Iterator> inline
    char * container_process(char * buffer, const Iterator & begin, const Iterator & end,
			     Handler & handler, Separator & separator)
    {
      for(Iterator current = begin; current != end; ++current)
	{
	  if(Align == align::left)
	    {
	      if(current != begin)
		{
		  buffer = separator.template handle<Config, Action>(buffer);
		}

	      buffer = handler.template handle<Config, Action>(buffer, *current);
	    }
	  else if(Align == align::right)
	    {
	      if(current != begin)
		{
		  buffer -= (std::size_t)separator.template handle<Config, action::size>(nullptr);

		  separator.template handle<Config, Action>(buffer);
		}

	      buffer -= (std::size_t)handler.template handle<Config, action::size>(nullptr, *current);

	      handler.template handle<Config, Action>(buffer, *current);
	    }
	}

      return buffer;
    }

    template<config Config, align Align, char Pad, action Action,
	     class Handler, class Separator, typename Iterator, bool UsePreviousLength> inline
    char * container(char * buffer, const Iterator & begin, const Iterator & end, std::size_t max_length,
		     Handler & handler, Separator & separator, std::size_t & previous_length)
    {
      if(Config == config::static_)
	{
	  if(Align == align::right)
	    {
	      buffer += -(std::size_t)details::container_process<config::static_, Align, action::size, Handler, Separator, Iterator>(nullptr, begin, end, handler, separator);
	    }

	  char * local = buffer;

	  if(Action == action::prepare)
	    {
	      local = details::container_process<Config, Align, Action, Handler, Separator, Iterator>(local, begin, end, handler, separator);
	    }

	  if(Align == align::left)
	    {
	      buffer = local;
	    }
	}
      else if(Config == config::dynamic)
	{
	  switch(Action)
	    {
	    case action::prepare:
	      {
		if(UsePreviousLength)
		  {
		    previous_length = max_length;
		  }
	      }
	    case action::reset:
	      {
		reset<Align, UsePreviousLength, Pad, std::size_t>(buffer, max_length, previous_length);

		break;
	      }
	    case action::write:
	      {
		std::size_t current_length = 0;

		if(Align == align::left)
		  {
		    char * local = details::container_process<Config, Align, Action, Handler, Separator, Iterator>(buffer, begin, end, handler, separator);

		    pad_right<UsePreviousLength, Pad>(buffer, local, max_length, previous_length);
		  }
		else if(Align == align::right)
		  {
		    char * local = details::container_process<Config, Align, Action, Handler, Separator, Iterator>(buffer + max_length, begin, end, handler, separator);

		    pad_left<UsePreviousLength, Pad>(buffer, local, max_length, previous_length);
		  }
	      }
	    }

	  buffer += max_length;
	}

      return buffer;
    }
  };

  template<config Config, align Align, char Pad, action Action,
	   class Handler, class Separator, typename Iterator> inline
  char * container(char * buffer, const Iterator & begin, const Iterator & end, std::size_t max_length,
		   Handler & handler, Separator & separator, std::size_t & previous_length)
  {
    return details::container<Config, Align, Pad, Action, Handler, Separator, Iterator, true>
      (buffer, begin, end, max_length, handler, separator, previous_length);
  }

  template<config Config, align Align, char Pad, action Action,
	   class Handler, class Separator, typename Iterator> inline
  char * container(char * buffer, const Iterator & begin, const Iterator & end, std::size_t max_length,
		   Handler & handler, Separator & separator)
  {
    return details::container<Config, Align, Pad, Action, Handler, Separator, Iterator, false>
      (buffer, begin, end, max_length, handler, separator, max_length);
  }

  template<align Align, char Pad>
  struct container_t<config::dynamic, Align, Pad, false>
  {
  public:
    container_t() :
      max_length(0)
    {

    }

  public:
    void set_max_length(std::size_t length)
    {
      this->max_length = length;
    }

  protected:
    std::size_t max_length;

  public:
    template<action Action, class Iterator, class Handler, class Separator>
    char * handle(char * buffer, const Iterator & begin, const Iterator & end, Handler & handler, Separator & separator)
    {
      return container<config::dynamic, Align, Pad, Action, Handler, Separator, Iterator>(buffer, begin, end, this->max_length, handler, separator);
    }
  };

  template<align Align, char Pad>
  struct container_t<config::dynamic, Align, Pad, true>
  {
  public:
    container_t():
      previous_length(0)
    {

    }

  public:
    void set_max_length(std::size_t length)
    {
      this->max_length = length;
    }

  protected:
    std::size_t max_length;
    std::size_t previous_length;

  public:
    template<action Action, class Iterator, class Handler, class Separator>
    char * handle(char * buffer, const Iterator & begin, const Iterator & end, Handler & handler, Separator & separator)
    {
      return container<config::dynamic, Align, Pad, Action, Handler, Separator, Iterator>(buffer, begin, end, this->max_length, handler, separator, this->previous_length);
    }
  };

  template<align Align, char Pad, bool IsLong>
  struct container_t<config::static_, Align, Pad, IsLong>
  {
    void set_max_length(std::size_t length)
    {

    }

    template<action Action, class Iterator, class Handler, class Separator>
    char * handle(char * buffer, const Iterator & begin, const Iterator & end, Handler & handler, Separator & separator)
    {
      std::size_t dummy_max_length;

      return container<config::static_, Align, Pad, Action, Handler, Separator, Iterator>(buffer, begin, end, dummy_max_length, handler, separator);
    }
  };
};

#include <cstddef> // size_t
#include <cstring> // memcpy() strlen()

#include <buffer_handle/number.hpp> // four_digits_number() two_digits_number()
#include <buffer_handle/string.hpp> // string()
#include <buffer_handle/time.hpp> // time_()
#include <buffer_handle/token.hpp> // comma() hyphen() space()

namespace buffer_handle
{
  namespace details
  {
    template<typename Day>
    const char * wkday(Day day);

    template<typename Day>
    const char * weekday(Day day);

    template<typename Month>
    const char * month(Month month);
  };

  template<config Config, char InsteadOfALeadingZeroForDay, char Separator, bool YearOn4Digits, action Action,
	   typename Day, typename Month, typename Year> inline
  char * day_month_year(char * buffer, Day day, Month month, Year year)
  {
    if((Config == config::static_ && Action == action::prepare)
       || (Config == config::dynamic && Action != action::size))
      {
	switch(Action)
	  {
	  case action::prepare:
	    {
	      character<config::static_, action::prepare>(buffer + 2, Separator);
	      character<config::static_, action::prepare>(buffer + 6, Separator);
	    }
	  case action::write:
	  case action::reset:
	    {
	      assert(0 <= day && day <= 31);//Allow zero for reset purpose
	      assert(1 <= month && month <= 12);
	      assert(0 <= year && year <= 9999);

	      two_digits_number<Config, InsteadOfALeadingZeroForDay, Action, Day>(buffer, day);

	      std::memcpy(buffer + 3, details::month<Month>(month - 1), std::strlen(details::month<Month>(month - 1)));

	      if(YearOn4Digits)
		{
		  four_digits_number<Config, Action, Year>(buffer + 7, year);
		}
	      else
		{
		  two_digits_number<Config, '\0', Action, Year>(buffer + 7, year % 100);
		}
	    }
	  }
      }

    return buffer + 2 + 1 + 3 + 1 + 2 * (1 + YearOn4Digits);
  }

  template<config Config, action Action,
	   typename Month, typename Day> inline
  char * month_day(char * buffer, Month month, Day day)
  {
    if((Config == config::static_ && Action == action::prepare)
       || (Config == config::dynamic && Action != action::size))
      {
	switch(Action)
	  {
	  case action::prepare:
	    {
	      space<config::static_, action::prepare>(buffer + 3);
	    }
	  case action::write:
	  case action::reset:
	    {
	      assert(1 <= month && month <= 12);

	      std::memcpy(buffer, details::month<Month>(month - 1), std::strlen(details::month<Month>(month - 1)));
	      two_digits_number<Config, '\0', Action, Day>(buffer + 4, day);
	    }
	  }
      }

    return buffer + 3 + 1 + 2;
  }

  namespace asc
  {
    template<config Config, action Action,
	     typename Weekday, typename Day, typename Month, typename Year,
	     typename Hours, typename Minutes, typename Seconds> inline
    char * date(char * buffer,
		Weekday weekday, Day day, Month month, Year year,
		Hours hours, Minutes minutes, Seconds seconds)
    {
      switch(Action)
	{
	case action::prepare:
	  {
	    space<config::static_, action::prepare>(buffer + 3);
	  }
	case action::write:
	case action::reset:
	  {
	    std::memcpy(buffer, details::wkday(weekday), std::strlen(details::wkday(weekday)));
	  }
	}

      buffer += 3;

      buffer = space<Config, Action>(buffer);

      buffer = month_day<Config, Action, Month, Day>(buffer, month, day);

      buffer = space<Config, Action>(buffer);

      buffer = time_<Config, Action, Hours, Minutes, Seconds>(buffer, hours, minutes, seconds);

      buffer = space<Config, Action>(buffer);

      buffer = four_digits_number<Config, Action, Year>(buffer, year);

      return buffer;
    }

    template<config Config, action Action> inline
    char * date(char * buffer, std::tm date_time)
    {
      return date<Config, Action>
	(buffer,
	 date_time.tm_wday, date_time.tm_mday, date_time.tm_mon + 1, date_time.tm_year + 1900,
	 date_time.tm_hour, date_time.tm_min, date_time.tm_sec);
    }
  };

  namespace rfc822
  {
    namespace details
    {
      template<config Config, bool HandleWeekday, action Action, typename Weekday> inline
      char * begin(char * buffer, Weekday weekday)
      {
	if(HandleWeekday)
	  {
	    switch(Action)
	      {
	      case action::prepare:
		{
		  comma<config::static_, action::prepare>(buffer + 3);
		  space<config::static_, action::prepare>(buffer + 4);
		}
	      case action::write:
	      case action::reset:
		{
		  std::memcpy(buffer, ::buffer_handle::details::wkday<Weekday>(weekday), std::strlen(::buffer_handle::details::wkday<Weekday>(weekday)));
		}
	      }

	    buffer += 5;
	  }

	return buffer;
      }

      template<config Config, bool HandleSeconds, class Timezone, action Action,
	       typename Hours, typename Minutes, typename Seconds> inline
      char * end(char * buffer, Hours hours, Minutes minutes, Seconds seconds, const Timezone & timezone)
      {
	buffer = space<Config, Action>(buffer);

	if(HandleSeconds)
	  {
	    buffer = time_<Config, Action, Hours, Minutes, Seconds>(buffer, hours, minutes, seconds);
	  }
	else
	  {
	    buffer = time_<Config, Action, Hours, Minutes>(buffer, hours, minutes);
	  }

	buffer = space<Config, Action>(buffer);

	buffer = timezone.template handle<Action>(buffer);

	return buffer;
      }
    };

    template<config Config, bool HandleWeekday, bool HandleSeconds, class Timezone, action Action,
	     typename Weekday, typename Day, typename Month, typename Year,
	     typename Hours, typename Minutes, typename Seconds> inline
    char * date(char * buffer,
		Weekday weekday, Day day, Month month, Year year,
		Hours hours, Minutes minutes, Seconds seconds,
		const Timezone & timezone)
    {
      buffer = details::begin<Config, HandleWeekday, Action, Weekday>(buffer, weekday);

      buffer = day_month_year<Config, false, ' ', false, Action, Day, Month, Year>(buffer, day, month, year);

      buffer = details::end<Config, HandleSeconds, Timezone, Action, Hours, Minutes, Seconds>(buffer, hours, minutes, seconds, timezone);

      return buffer;
    }

    template<config Config, bool HandleWeekday, bool HandleSeconds, class Timezone, action Action> inline
    char * date(char * buffer, std::tm date_time, const Timezone & timezone)
    {
      return date<Config, HandleWeekday, HandleSeconds, Timezone, Action>
	(buffer,
	 date_time.tm_wday, date_time.tm_mday, date_time.tm_mon + 1, date_time.tm_year + 1900,
	 date_time.tm_hour, date_time.tm_min, date_time.tm_sec,
	 timezone);
    }
  };

  namespace rfc850
  {
    template<config Config, class Timezone, action Action,
	     typename Weekday, typename Day, typename Month, typename Year,
	     typename Hours, typename Minutes, typename Seconds> inline
    char * date(char * buffer,
		Weekday weekday, Day day, Month month, Year year,
		Hours hours, Minutes minutes, Seconds seconds,
		const Timezone & timezone)
    {
      std::size_t max_length;

      if(Config == config::static_)
	{
	  max_length = std::strlen(details::weekday(weekday));

	  buffer = string<Config, align::right, ' ', Action>(buffer, details::weekday(weekday), max_length, max_length);
	}
      else if(Config == config::dynamic)
	{
	  max_length = std::strlen(details::weekday(7));//Default is equal to longest

	  string<Config, align::right, ' ', Action>(buffer, details::weekday(weekday), std::strlen(details::weekday(weekday)), max_length);

	  buffer += max_length;
	}

      buffer = comma<Config, Action>(buffer);

      buffer = space<Config, Action>(buffer);

      buffer = day_month_year<Config, false, '-', false, Action, Day, Month, Year>(buffer, day, month, year);

      buffer = space<Config, Action>(buffer);

      buffer = time_<Config, Action, Hours, Minutes, Seconds>(buffer, hours, minutes, seconds);

      buffer = space<Config, Action>(buffer);

      buffer = timezone.template handle<Action>(buffer);

      return buffer;
    }

    template<config Config, class Timezone, action Action> inline
    char * date(char * buffer, std::tm date_time, const Timezone & timezone)
    {
      return
	date<Config, Timezone, Action>
	(buffer,
	 date_time.tm_wday, date_time.tm_mday, date_time.tm_mon + 1, date_time.tm_year + 1900,
	 date_time.tm_hour, date_time.tm_min, date_time.tm_sec,
	 timezone);
    }
  };

  namespace rfc1123
  {
    template<config Config, bool HandleWeekday, bool HandleSeconds, class Timezone, action Action,
	     typename Weekday, typename Day, typename Month, typename Year,
	     typename Hours, typename Minutes, typename Seconds> inline
    char * date(char * buffer,
		Weekday weekday, Day day, Month month, Year year,
		Hours hours, Minutes minutes, Seconds seconds,
		const Timezone & timezone)
    {
      buffer = ::buffer_handle::rfc822::details::begin<Config, HandleWeekday, Action, Weekday>(buffer, weekday);

      buffer = day_month_year<Config, false, ' ', true, Action, Day, Month, Year>(buffer, day, month, year);

      buffer = ::buffer_handle::rfc822::details::end<Config, HandleSeconds, Timezone, Action, Hours, Minutes, Seconds>(buffer, hours, minutes, seconds, timezone);

      return buffer;
    }

    template<config Config, bool HandleWeekday, bool HandleSeconds, class Timezone, action Action> inline
    char * date(char * buffer, std::tm date_time, const Timezone & timezone)
    {
      return
	date<Config, HandleWeekday, HandleSeconds, Timezone, Action>
	(buffer,
	 date_time.tm_wday, date_time.tm_mday, date_time.tm_mon + 1, date_time.tm_year + 1900,
	 date_time.tm_hour, date_time.tm_min, date_time.tm_sec,
	 timezone);
    }
  };

  namespace details
  {
    template<typename Day> inline
    const char * wkday(Day day)
    {
      switch(day)
	{
	case  0: return "Sun";
	case  1: return "Mon";
	case  2: return "Tue";
	case  3: return "Wed";
	case  4: return "Thu";
	case  5: return "Fri";
	case  6: return "Sat";
	default: return "   ";
	}
    }

    template<typename Day> inline
    const char * weekday(Day day)
    {
      switch(day)
	{
	case  0: return "Sunday";
	case  1: return "Monday";
	case  2: return "Tuesday";
	case  3: return "Wednesday";
	case  4: return "Thursday";
	case  5: return "Friday";
	case  6: return "Saturday";
	default: return "         ";
	}
    }

    template<typename Month> inline
    const char * month(Month month)
    {
      switch(month)
	{
	case  0: return "Jan";
	case  1: return "Feb";
	case  2: return "Mar";
	case  3: return "Apr";
	case  4: return "May";
	case  5: return "Jun";
	case  6: return "Jul";
	case  7: return "Aug";
	case  8: return "Sep";
	case  9: return "Oct";
	case 10: return "Nov";
	case 11: return "Dec";
	default: return "   ";
	}
    }
  };
};

#include <buffer_handle/character.hpp> // character()

namespace buffer_handle
{//LCOV_EXCL_START
  template<config Config, action Action> inline
  char * new_line(char * buffer)
  {
    return character<Config, Action>(buffer, '\n');
  }

  template<config Config, action Action> inline
  char * carriage_return(char * buffer)
  {
    return character<Config, Action>(buffer, '\r');
  }

  template<config Config, action Action> inline
  char * space(char * buffer)
  {
    return character<Config, Action>(buffer, ' ');
  }

  template<config Config, action Action> inline
  char * exclamation_mark(char * buffer)
  {
    return character<Config, Action>(buffer, '!');
  }

  template<config Config, action Action> inline
  char * double_quote(char * buffer)
  {
    return character<Config, Action>(buffer, '"');
  }

  template<config Config, action Action> inline
  char * single_quote(char * buffer)
  {
    return character<Config, Action>(buffer, '\'');
  }

  template<config Config, action Action> inline
  char * opening_parenthesis(char * buffer)
  {
    return character<Config, Action>(buffer, '(');
  }

  template<config Config, action Action> inline
  char * closing_parenthesis(char * buffer)
  {
    return character<Config, Action>(buffer, ')');
  }

  template<config Config, action Action> inline
  char * plus(char * buffer)
  {
    return character<Config, Action>(buffer, '+');
  }

  template<config Config, action Action> inline
  char * comma(char * buffer)
  {
    return character<Config, Action>(buffer, ',');
  }

  template<config Config, action Action> inline
  char * hyphen(char * buffer)
  {
    return character<Config, Action>(buffer, '-');
  }

  template<config Config, action Action> inline
  char * minus(char * buffer)
  {
    return character<Config, Action>(buffer, '-');
  }

  template<config Config, action Action> inline
  char * dot(char * buffer)
  {
    return character<Config, Action>(buffer, '.');
  }

  template<config Config, action Action> inline
  char * slash(char * buffer)
  {
    return character<Config, Action>(buffer, '/');
  }

  template<config Config, action Action> inline
  char * colon(char * buffer)
  {
    return character<Config, Action>(buffer, ':');
  }

  template<config Config, action Action> inline
  char * semicolon(char * buffer)
  {
    return character<Config, Action>(buffer, ';');
  }

  template<config Config, action Action> inline
  char * less_than(char * buffer)
  {
    return character<Config, Action>(buffer, '<');
  }

  template<config Config, action Action> inline
  char * equal(char * buffer)
  {
    return character<Config, Action>(buffer, '=');
  }

  template<config Config, action Action> inline
  char * greater_than(char * buffer)
  {
    return character<Config, Action>(buffer, '>');
  }

  template<config Config, action Action> inline
  char * question_mark(char * buffer)
  {
    return character<Config, Action>(buffer, '?');
  }

  template<config Config, action Action> inline
  char * opening_bracket(char * buffer)
  {
    return character<Config, Action>(buffer, '[');
  }

  template<config Config, action Action> inline
  char * backslash(char * buffer)
  {
    return character<Config, Action>(buffer, '\\');
  }

  template<config Config, action Action> inline
  char * closing_bracket(char * buffer)
  {
    return character<Config, Action>(buffer, ']');
  }

  template<config Config, action Action> inline
  char * underscore(char * buffer)
  {
    return character<Config, Action>(buffer, '_');
  }

  template<config Config, action Action> inline
  char * backquote(char * buffer)
  {
    return character<Config, Action>(buffer, '`');
  }

  template<config Config, action Action> inline
  char * opening_brace(char * buffer)
  {
    return character<Config, Action>(buffer, '[');
  }

  template<config Config, action Action> inline
  char * pipe(char * buffer)
  {
    return character<Config, Action>(buffer, '|');
  }

  template<config Config, action Action> inline
  char * closing_brace(char * buffer)
  {
    return character<Config, Action>(buffer, ']');
  }
//LCOV_EXCL_STOP
};

#include <cassert> // assert()
#include <cstring> // memcpy() memset() strlen()

#include <buffer_handle/helper.hpp> // must_write() reset()

namespace buffer_handle
{
  template<config Config, action Action> inline
  char * string(char * buffer, const char * value, std::size_t length)
  {
    if(must_write<Config, Action>())
      {
	std::memcpy(buffer, value, length);
      }

    return buffer + length;
  }

  template<config Config, action Action> inline
  char * string(char * buffer, const char * value)
  {
    return string<Config, Action>(buffer, value, std::strlen(value));
  }

  namespace details
  {
    template<config Config, align Align, char Pad, action Action, bool UsePreviousLength> inline
    char * string(char * buffer, const char * value, std::size_t length, std::size_t max_length, std::size_t & previous_length)
    {
      if(Config == config::static_)
	{
	  if(Action == action::size)
	    {
	      if(value == nullptr)
		{
		  length = max_length;
		}
	    }
	  else if(Action == action::prepare)
	    {
	      assert(value != nullptr && "A static string requires a non null value initializer.");

	      std::memcpy(buffer, value, length);
	    }

	  buffer += length;
	}
      else if(Config == config::dynamic)
	{
	  switch(Action)
	    {
	    case action::size:
	      {
		return buffer + max_length;
	      }
	    case action::prepare:
	      {
		if(UsePreviousLength)
		  {
		    previous_length = max_length;
		  }
	      }
	    case action::reset:
	      {
		value = nullptr;
	      }
	    case action::write:
	      {
		if(value == nullptr)
		  {
		    reset<Align, UsePreviousLength, Pad, std::size_t>(buffer, max_length, previous_length);
		  }
		else
		  {
		    assert(length <= max_length);

		    if(Align == align::left)
		      {
			std::memcpy(buffer, value, length);

			pad_right<UsePreviousLength, Pad>(buffer, buffer + length, max_length, previous_length);
		      }
		    else if(Align == align::right)
		      {
			char * local = buffer + max_length - length;

			std::memcpy(local, value, length);

			pad_left<UsePreviousLength, Pad>(buffer, local, max_length, previous_length);
		      }
		  }
	      }
	    }

	  buffer += max_length;
	}

      return buffer;
    }
  };

  template<config Config, align Align, char Pad, action Action> inline
  char * string(char * buffer, const char * value, std::size_t length, std::size_t max_length, std::size_t & previous_length)
  {
    return details::string<Config, Align, Pad, Action, true>(buffer, value, length, max_length, previous_length);
  }

  template<config Config, align Align, char Pad, action Action> inline
  char * string(char * buffer, const char * value, std::size_t length, std::size_t max_length)
  {
    return details::string<Config, Align, Pad, Action, false>(buffer, value, length, max_length, max_length);
  }

  template<config Config, align Align, char Pad, action Action> inline
  char * string(char * buffer, char * & value, std::size_t length, std::size_t max_length)
  {
    switch(Action)
      {
      case action::size:
	{
	  return buffer + max_length;
	}
      case action::prepare:
	{
	  if(Align == align::left)
	    {
	      value = buffer;
	    }
	  else if(Align == align::right)
	    {
	      value = buffer + max_length;
	    }
	}
      }

    return buffer + max_length;
  }

  template<align Align, char Pad>
  struct string_t<config::dynamic, Align, Pad, false>
  {
  public:
    string_t() :
      max_length(0)
    {

    }

  protected:
    std::size_t max_length;

  public:
    template<action Action>
    char * handle(char * buffer, const char * value, std::size_t length)
    {
      if((this->max_length == 0 && Action == action::size)
	 || Action == action::prepare)
	{
	  this->max_length = length;
	}

      return string<config::dynamic, Align, Pad, Action>(buffer, value, length, this->max_length);
    }
  };

  template<align Align, char Pad>
  struct string_t<config::dynamic, Align, Pad, true>
  {
  public:
    string_t() :
      max_length(0),
      previous_length(0)
    {

    }

  protected:
    std::size_t max_length;
    std::size_t previous_length;

  public:
    template<action Action>
    char * handle(char * buffer, const char * value, std::size_t length)
    {
      if((this->max_length == 0 && Action == action::size)
	 || Action == action::prepare)
	{
	  this->max_length = length;
	}

      return string<config::dynamic, Align, Pad, Action>(buffer, value, length, this->max_length, this->previous_length);
    }
  };

  template<align Align, char Pad, bool IsLong>
  struct string_t<config::static_, Align, Pad, IsLong>
  {
    template<action Action>
    char * handle(char * buffer, const char * value, std::size_t length)
    {
      return string<config::static_, Action>(buffer, value, length);
    }
  };
};
